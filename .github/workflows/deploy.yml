name: Django CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: "Run all Tests"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install Dependencies
        run: |
          cp .env.example .env
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          python manage.py test

  build:
    name: "Build and Publish"
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      repo-name-lower: ${{ steps.to_lowercase.outputs.REPO_NAME_LOWER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Convert repository name to lowercase
        id: to_lowercase
        run: echo "REPO_NAME_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Get version and increment patch
        id: get_version
        run: |
          SEMANTIC_VERSION=$(cat version.txt)
          
          # Split the semantic version into major, minor, and patch
          IFS='.' read -r -a VERSION_PARTS <<< "$SEMANTIC_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          
          IMAGE_TAG="ghcr.io/${{ steps.to_lowercase.outputs.REPO_NAME_LOWER }}:$SEMANTIC_VERSION"
          
          if docker manifest inspect "$IMAGE_TAG" >/dev/null 2>&1 || [ $? -eq 1 ]; then
            PATCH=$((PATCH + 1))
          fi
          
          # Update the version in the file
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker
        run: |
          echo "${{ secrets.GH_PAT }} " | docker login --username ${{ secrets.GH_PAT_USER }} --password-stdin ghcr.io

      - name: Remove previous "latest" image
        run: |
          PREVIOUS_LATEST_TAG="ghcr.io/${{ steps.to_lowercase.outputs.REPO_NAME_LOWER }}:latest"
          docker image rm -f "$PREVIOUS_LATEST_TAG" || true  # The `|| true` prevents the step from failing if the image doesn't exist

      - name: Build and push Docker image
        run: |
          SEM_TAG="ghcr.io/${{ steps.to_lowercase.outputs.REPO_NAME_LOWER }}:${{ steps.get_version.outputs.VERSION }}"
          LATEST_TAG="ghcr.io/${{ steps.to_lowercase.outputs.REPO_NAME_LOWER }}:latest"
          docker buildx create --use
          docker buildx build -t "$SEM_TAG" -t "$LATEST_TAG" -f Dockerfile . --push

      - name: Commit updated version to version.txt
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          echo "${{ steps.get_version.outputs.VERSION }}" > version.txt
          git add version.txt
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          echo "https://$GH_PAT@github.com/${{ github.repository }}.git"
          git push https://$GH_PAT@github.com/${{ github.repository }}.git HEAD:refs/heads/main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

  deploy:
    name: "Deploy to production server"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_KEY }}
          script: |
            bash ~/PlusOneBlogTaskServer/deploy.sh

